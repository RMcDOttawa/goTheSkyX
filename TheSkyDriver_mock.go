// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RMcDOttawa/goTheSkyX (interfaces: TheSkyDriver)

// Package goTheSkyX is a generated GoMock package.
package goTheSkyX

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTheSkyDriver is a mock of TheSkyDriver interface.
type MockTheSkyDriver struct {
	ctrl     *gomock.Controller
	recorder *MockTheSkyDriverMockRecorder
}

// MockTheSkyDriverMockRecorder is the mock recorder for MockTheSkyDriver.
type MockTheSkyDriverMockRecorder struct {
	mock *MockTheSkyDriver
}

// NewMockTheSkyDriver creates a new mock instance.
func NewMockTheSkyDriver(ctrl *gomock.Controller) *MockTheSkyDriver {
	mock := &MockTheSkyDriver{ctrl: ctrl}
	mock.recorder = &MockTheSkyDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTheSkyDriver) EXPECT() *MockTheSkyDriverMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTheSkyDriver) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTheSkyDriverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTheSkyDriver)(nil).Close))
}

// Connect mocks base method.
func (m *MockTheSkyDriver) Connect(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockTheSkyDriverMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockTheSkyDriver)(nil).Connect), arg0, arg1)
}

// ConnectCamera mocks base method.
func (m *MockTheSkyDriver) ConnectCamera() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectCamera")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectCamera indicates an expected call of ConnectCamera.
func (mr *MockTheSkyDriverMockRecorder) ConnectCamera() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectCamera", reflect.TypeOf((*MockTheSkyDriver)(nil).ConnectCamera))
}

// FilterNames mocks base method.
func (m *MockTheSkyDriver) FilterNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterNames indicates an expected call of FilterNames.
func (mr *MockTheSkyDriverMockRecorder) FilterNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterNames", reflect.TypeOf((*MockTheSkyDriver)(nil).FilterNames))
}

// FilterWheelConnect mocks base method.
func (m *MockTheSkyDriver) FilterWheelConnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterWheelConnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// FilterWheelConnect indicates an expected call of FilterWheelConnect.
func (mr *MockTheSkyDriverMockRecorder) FilterWheelConnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterWheelConnect", reflect.TypeOf((*MockTheSkyDriver)(nil).FilterWheelConnect))
}

// FilterWheelDisconnect mocks base method.
func (m *MockTheSkyDriver) FilterWheelDisconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterWheelDisconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// FilterWheelDisconnect indicates an expected call of FilterWheelDisconnect.
func (mr *MockTheSkyDriverMockRecorder) FilterWheelDisconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterWheelDisconnect", reflect.TypeOf((*MockTheSkyDriver)(nil).FilterWheelDisconnect))
}

// FilterWheelIsConnected mocks base method.
func (m *MockTheSkyDriver) FilterWheelIsConnected() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterWheelIsConnected")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterWheelIsConnected indicates an expected call of FilterWheelIsConnected.
func (mr *MockTheSkyDriverMockRecorder) FilterWheelIsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterWheelIsConnected", reflect.TypeOf((*MockTheSkyDriver)(nil).FilterWheelIsConnected))
}

// GetADUValue mocks base method.
func (m *MockTheSkyDriver) GetADUValue() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetADUValue")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetADUValue indicates an expected call of GetADUValue.
func (mr *MockTheSkyDriverMockRecorder) GetADUValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetADUValue", reflect.TypeOf((*MockTheSkyDriver)(nil).GetADUValue))
}

// GetCameraTemperature mocks base method.
func (m *MockTheSkyDriver) GetCameraTemperature() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCameraTemperature")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCameraTemperature indicates an expected call of GetCameraTemperature.
func (mr *MockTheSkyDriverMockRecorder) GetCameraTemperature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCameraTemperature", reflect.TypeOf((*MockTheSkyDriver)(nil).GetCameraTemperature))
}

// IsCaptureDone mocks base method.
func (m *MockTheSkyDriver) IsCaptureDone() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCaptureDone")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCaptureDone indicates an expected call of IsCaptureDone.
func (mr *MockTheSkyDriverMockRecorder) IsCaptureDone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCaptureDone", reflect.TypeOf((*MockTheSkyDriver)(nil).IsCaptureDone))
}

// MeasureDownloadTime mocks base method.
func (m *MockTheSkyDriver) MeasureDownloadTime(arg0 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeasureDownloadTime", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MeasureDownloadTime indicates an expected call of MeasureDownloadTime.
func (mr *MockTheSkyDriverMockRecorder) MeasureDownloadTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeasureDownloadTime", reflect.TypeOf((*MockTheSkyDriver)(nil).MeasureDownloadTime), arg0)
}

// SetDebug mocks base method.
func (m *MockTheSkyDriver) SetDebug(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDebug", arg0)
}

// SetDebug indicates an expected call of SetDebug.
func (mr *MockTheSkyDriverMockRecorder) SetDebug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebug", reflect.TypeOf((*MockTheSkyDriver)(nil).SetDebug), arg0)
}

// SetVerbosity mocks base method.
func (m *MockTheSkyDriver) SetVerbosity(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVerbosity", arg0)
}

// SetVerbosity indicates an expected call of SetVerbosity.
func (mr *MockTheSkyDriverMockRecorder) SetVerbosity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerbosity", reflect.TypeOf((*MockTheSkyDriver)(nil).SetVerbosity), arg0)
}

// StartBiasFrameCapture mocks base method.
func (m *MockTheSkyDriver) StartBiasFrameCapture(arg0 int, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBiasFrameCapture", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartBiasFrameCapture indicates an expected call of StartBiasFrameCapture.
func (mr *MockTheSkyDriverMockRecorder) StartBiasFrameCapture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBiasFrameCapture", reflect.TypeOf((*MockTheSkyDriver)(nil).StartBiasFrameCapture), arg0, arg1)
}

// StartCooling mocks base method.
func (m *MockTheSkyDriver) StartCooling(arg0 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCooling", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCooling indicates an expected call of StartCooling.
func (mr *MockTheSkyDriverMockRecorder) StartCooling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCooling", reflect.TypeOf((*MockTheSkyDriver)(nil).StartCooling), arg0)
}

// StartDarkFrameCapture mocks base method.
func (m *MockTheSkyDriver) StartDarkFrameCapture(arg0 int, arg1, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDarkFrameCapture", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDarkFrameCapture indicates an expected call of StartDarkFrameCapture.
func (mr *MockTheSkyDriverMockRecorder) StartDarkFrameCapture(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDarkFrameCapture", reflect.TypeOf((*MockTheSkyDriver)(nil).StartDarkFrameCapture), arg0, arg1, arg2)
}

// StartFlatFrameCapture mocks base method.
func (m *MockTheSkyDriver) StartFlatFrameCapture(arg0 int, arg1 float64, arg2 int, arg3 float64, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFlatFrameCapture", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartFlatFrameCapture indicates an expected call of StartFlatFrameCapture.
func (mr *MockTheSkyDriverMockRecorder) StartFlatFrameCapture(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlatFrameCapture", reflect.TypeOf((*MockTheSkyDriver)(nil).StartFlatFrameCapture), arg0, arg1, arg2, arg3, arg4)
}

// StopCooling mocks base method.
func (m *MockTheSkyDriver) StopCooling() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCooling")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCooling indicates an expected call of StopCooling.
func (mr *MockTheSkyDriverMockRecorder) StopCooling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCooling", reflect.TypeOf((*MockTheSkyDriver)(nil).StopCooling))
}
