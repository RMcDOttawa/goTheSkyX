// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RMcDOttawa/goTheSkyX (interfaces: TheSkyService)

// Package goTheSkyX is a generated GoMock package.
package goTheSkyX

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTheSkyService is a mock of TheSkyService interface.
type MockTheSkyService struct {
	ctrl     *gomock.Controller
	recorder *MockTheSkyServiceMockRecorder
}

// MockTheSkyServiceMockRecorder is the mock recorder for MockTheSkyService.
type MockTheSkyServiceMockRecorder struct {
	mock *MockTheSkyService
}

// NewMockTheSkyService creates a new mock instance.
func NewMockTheSkyService(ctrl *gomock.Controller) *MockTheSkyService {
	mock := &MockTheSkyService{ctrl: ctrl}
	mock.recorder = &MockTheSkyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTheSkyService) EXPECT() *MockTheSkyServiceMockRecorder {
	return m.recorder
}

// CaptureAndMeasureFlatFrame mocks base method.
func (m *MockTheSkyService) CaptureAndMeasureFlatFrame(arg0 float64, arg1, arg2 int, arg3 float64, arg4 bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureAndMeasureFlatFrame", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CaptureAndMeasureFlatFrame indicates an expected call of CaptureAndMeasureFlatFrame.
func (mr *MockTheSkyServiceMockRecorder) CaptureAndMeasureFlatFrame(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureAndMeasureFlatFrame", reflect.TypeOf((*MockTheSkyService)(nil).CaptureAndMeasureFlatFrame), arg0, arg1, arg2, arg3, arg4)
}

// CaptureBiasFrame mocks base method.
func (m *MockTheSkyService) CaptureBiasFrame(arg0 int, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureBiasFrame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CaptureBiasFrame indicates an expected call of CaptureBiasFrame.
func (mr *MockTheSkyServiceMockRecorder) CaptureBiasFrame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureBiasFrame", reflect.TypeOf((*MockTheSkyService)(nil).CaptureBiasFrame), arg0, arg1)
}

// CaptureDarkFrame mocks base method.
func (m *MockTheSkyService) CaptureDarkFrame(arg0 int, arg1, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureDarkFrame", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CaptureDarkFrame indicates an expected call of CaptureDarkFrame.
func (mr *MockTheSkyServiceMockRecorder) CaptureDarkFrame(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureDarkFrame", reflect.TypeOf((*MockTheSkyService)(nil).CaptureDarkFrame), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockTheSkyService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTheSkyServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTheSkyService)(nil).Close))
}

// Connect mocks base method.
func (m *MockTheSkyService) Connect(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockTheSkyServiceMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockTheSkyService)(nil).Connect), arg0, arg1)
}

// ConnectCamera mocks base method.
func (m *MockTheSkyService) ConnectCamera() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectCamera")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectCamera indicates an expected call of ConnectCamera.
func (mr *MockTheSkyServiceMockRecorder) ConnectCamera() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectCamera", reflect.TypeOf((*MockTheSkyService)(nil).ConnectCamera))
}

// FilterNames mocks base method.
func (m *MockTheSkyService) FilterNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterNames indicates an expected call of FilterNames.
func (mr *MockTheSkyServiceMockRecorder) FilterNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterNames", reflect.TypeOf((*MockTheSkyService)(nil).FilterNames))
}

// GetCameraTemperature mocks base method.
func (m *MockTheSkyService) GetCameraTemperature() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCameraTemperature")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCameraTemperature indicates an expected call of GetCameraTemperature.
func (mr *MockTheSkyServiceMockRecorder) GetCameraTemperature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCameraTemperature", reflect.TypeOf((*MockTheSkyService)(nil).GetCameraTemperature))
}

// HasFilterWheel mocks base method.
func (m *MockTheSkyService) HasFilterWheel() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFilterWheel")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasFilterWheel indicates an expected call of HasFilterWheel.
func (mr *MockTheSkyServiceMockRecorder) HasFilterWheel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFilterWheel", reflect.TypeOf((*MockTheSkyService)(nil).HasFilterWheel))
}

// MeasureDownloadTime mocks base method.
func (m *MockTheSkyService) MeasureDownloadTime(arg0 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeasureDownloadTime", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MeasureDownloadTime indicates an expected call of MeasureDownloadTime.
func (mr *MockTheSkyServiceMockRecorder) MeasureDownloadTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeasureDownloadTime", reflect.TypeOf((*MockTheSkyService)(nil).MeasureDownloadTime), arg0)
}

// NumberOfFilters mocks base method.
func (m *MockTheSkyService) NumberOfFilters() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberOfFilters")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfFilters indicates an expected call of NumberOfFilters.
func (mr *MockTheSkyServiceMockRecorder) NumberOfFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfFilters", reflect.TypeOf((*MockTheSkyService)(nil).NumberOfFilters))
}

// SetDebug mocks base method.
func (m *MockTheSkyService) SetDebug(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDebug", arg0)
}

// SetDebug indicates an expected call of SetDebug.
func (mr *MockTheSkyServiceMockRecorder) SetDebug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebug", reflect.TypeOf((*MockTheSkyService)(nil).SetDebug), arg0)
}

// SetDriver mocks base method.
func (m *MockTheSkyService) SetDriver(arg0 TheSkyDriver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDriver", arg0)
}

// SetDriver indicates an expected call of SetDriver.
func (mr *MockTheSkyServiceMockRecorder) SetDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDriver", reflect.TypeOf((*MockTheSkyService)(nil).SetDriver), arg0)
}

// SetSimulateFlatCapture mocks base method.
func (m *MockTheSkyService) SetSimulateFlatCapture(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSimulateFlatCapture", arg0)
}

// SetSimulateFlatCapture indicates an expected call of SetSimulateFlatCapture.
func (mr *MockTheSkyServiceMockRecorder) SetSimulateFlatCapture(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSimulateFlatCapture", reflect.TypeOf((*MockTheSkyService)(nil).SetSimulateFlatCapture), arg0)
}

// SetSimulationNoiseFraction mocks base method.
func (m *MockTheSkyService) SetSimulationNoiseFraction(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSimulationNoiseFraction", arg0)
}

// SetSimulationNoiseFraction indicates an expected call of SetSimulationNoiseFraction.
func (mr *MockTheSkyServiceMockRecorder) SetSimulationNoiseFraction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSimulationNoiseFraction", reflect.TypeOf((*MockTheSkyService)(nil).SetSimulationNoiseFraction), arg0)
}

// SetVerbosity mocks base method.
func (m *MockTheSkyService) SetVerbosity(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVerbosity", arg0)
}

// SetVerbosity indicates an expected call of SetVerbosity.
func (mr *MockTheSkyServiceMockRecorder) SetVerbosity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerbosity", reflect.TypeOf((*MockTheSkyService)(nil).SetVerbosity), arg0)
}

// StartCooling mocks base method.
func (m *MockTheSkyService) StartCooling(arg0 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCooling", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCooling indicates an expected call of StartCooling.
func (mr *MockTheSkyServiceMockRecorder) StartCooling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCooling", reflect.TypeOf((*MockTheSkyService)(nil).StartCooling), arg0)
}

// StopCooling mocks base method.
func (m *MockTheSkyService) StopCooling() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCooling")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCooling indicates an expected call of StopCooling.
func (mr *MockTheSkyServiceMockRecorder) StopCooling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCooling", reflect.TypeOf((*MockTheSkyService)(nil).StopCooling))
}

// WaitForCameraInactive mocks base method.
func (m *MockTheSkyService) WaitForCameraInactive(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCameraInactive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCameraInactive indicates an expected call of WaitForCameraInactive.
func (mr *MockTheSkyServiceMockRecorder) WaitForCameraInactive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCameraInactive", reflect.TypeOf((*MockTheSkyService)(nil).WaitForCameraInactive), arg0, arg1)
}
